name: setup_integrated

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  PYTHONWARNINGS: error
  BASE_IMAGE: openpilot-base
  AZURE_TOKEN: ${{ secrets.AZURE_COMMADATACI_OPENPILOTCI_TOKEN }}

  DOCKER_LOGIN: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
  BUILD: selfdrive/test/docker_build.sh base

  RUN: docker run --shm-size 1G -v $PWD:/tmp/openpilot -w /tmp/openpilot -e CI=1 -e PRE_COMMIT_HOME=/tmp/pre-commit -e PYTHONWARNINGS=error -e FILEREADER_CACHE=1 -e PYTHONPATH=/tmp/openpilot -e NUM_JOBS -e JOB_ID -e GITHUB_ACTION -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_RUN_ID -v $GITHUB_WORKSPACE/.ci_cache/pre-commit:/tmp/pre-commit -v $GITHUB_WORKSPACE/.ci_cache/scons_cache:/tmp/scons_cache -v $GITHUB_WORKSPACE/.ci_cache/comma_download_cache:/tmp/comma_download_cache -v $GITHUB_WORKSPACE/.ci_cache/openpilot_cache:/tmp/openpilot_cache $BASE_IMAGE /bin/bash -c

  PYTEST: pytest --continue-on-collection-errors --cov --cov-report=xml --cov-append --durations=0 --durations-min=5 --hypothesis-seed 0 -n logical

jobs:
  build_release:
    name: build release
    runs-on: ubuntu-20.04
    env:
      STRIPPED_DIR: /tmp/releasepilot
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: ./.github/workflows/setup-with-retry


  setup-environment:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Cache Python Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.pyenv
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y --no-install-recommends \
        sudo tzdata locales ssh pulseaudio xvfb x11-xserver-utils gnome-screenshot \
        apt-utils alien unzip tar curl xz-utils dbus gcc-arm-none-eabi tmux vim lsb-core libx11-6
        sudo locale-gen en_US.UTF-8
      env:
        DEBIAN_FRONTEND: noninteractive
        LANG: en_US.UTF-8
        LANGUAGE: en_US:en
        LC_ALL: en_US.UTF-8

    - name: Install OpenCL and Other Dependencies
      run: |
        mkdir -p ${{ github.workspace }}/dependencies
        if [ ! -f ${{ github.workspace }}/dependencies/opencl-installed ]; then
          sudo apt-get update
          # Specify your dependency installation commands here
          echo "OpenCL and other dependencies installation steps"
          touch ${{ github.workspace }}/dependencies/opencl-installed
        fi

    - name: Setup Python Environment
      run: |
        if [ ! -d "$PYENV_ROOT" ]; then
          # Install PyEnv, Python, and Poetry here
          echo "Python environment setup steps"
        fi
      env:
        PYENV_ROOT: ${{ github.workspace }}/.pyenv
        PATH: $PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH

    - name: Install Python Dependencies
      run: |
        # Assuming poetry is used for Python dependency management
        poetry install
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Cleanup and Final Setup
      run: |
        sudo rm -rf /var/lib/apt/lists/* /tmp/*
        sudo dbus-uuidgen > /etc/machine-id
